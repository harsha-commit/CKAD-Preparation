Labels and Selectors:

k run nginx1 --image=nginx -l app=v1

k get pods --show-labels

k label pod nginx2 app=v2 --overwrite
# or delete and create
k label pod nginx2 app-
k label pod nginx2 app=v2

> Get the label 'app' for the pods (show a column with APP labels):
k get pod -L app
or 
k get pod --label-columns=app
or
k get pod -l app --show-labels

k get pods --selector=app=v2
k get pods -l app=v2
k get pods -l 'app in (v2)'

> Add a new label tier=web to all pods having 'app=v2' or 'app=v1' labels
k get pods -l app=v2,app=v1 # and label to all
or
k label po -l 'app in(v1,v2)' tier=web

'-l' behaves differently with 'run' and other commands
1. with run, it adds labels
2. with all others, it acts as query string.

> Add an annotation 'owner: marketing' to all pods having 'app=v2' label
k annotate pod -l 'app in (v2)' owner=marketing

> Remove the 'app' label from the pods we created before
k label pods -l 'app' app-
or
kubectl label po nginx{1..3} app- # multi selection

> Create a pod that will be deployed to a Node that has the label 'accelerator=nvidia-tesla-p100'
spec:
	nodeSelector:
		accelerator: nvidia-tesla-p100
# or use nodeAffinity or nodeName

> Annotate pods nginx1, nginx2, nginx3 with "description='my description'" value
k annotate pods nginx{1..3} description='my description'

> Delete all pods
k delete pods --all

-----------------------------------------------------------------

Deployments:

k create deployment nginx --image=nginx:1.18.0 --replicas=2 
 --port=80  # can do this for pod command also
k get deploy nginx -o yaml > deploy.yaml

> View the YAML of the replica set that was created by this deployment
k get rs -l app=nginx # by the labels of deployment**

k rollout status deployment nginx 
k set image deploy nginx nginx=nginx:1.19.8

k rollout history deploy nginx
k rollout history deploy nginx --revision=4
k rollout undo deploy nginx
k rollout undo deploy nginx --to-revision=2

k scale deploy nginx --replicas=5

> Autoscale the deployment, pods between 5 and 10, targetting CPU utilization at 80%

k rollout pause deploy nginx
k rollout resume deploy nginx

> Implement canary deployment by running two instances of 
  nginx marked as version=v1 and version=v2 
  so that the load is balanced at 75%-25% ratio


------------------------------------------------------------------

Jobs:

k create job pi --image=perl:5.34 
 -- perl -Mbignum=bpi -wle 'print bpi(2000)'

kubectl get jobs -w # wait till 'SUCCESSFUL' is 1
k get pods ..

k create job myjob --image=busybox -- /bin/sh -c 
 'echo hello;sleep 30;echo world' 

# Job termination and cleanup from docs
# activeDeadlineSeconds=30
kubectl create job busybox --image=busybox --dry-run=client 
-o yaml -- /bin/sh -c 
'while true; do echo hello; sleep 10;done' > job.yaml
vi job.yaml

# refer to doc
completions: 12
parallelism: 3

----------------------------------------------------------------

Cron Jobs:

k create cronjob cj --image=busybox --schedule="*/1 * * * *" 
 -- /bin/sh -c 'date; echo Hello from the Kubernetes cluster'

# for delete and replace, use --force if needed.

cronjob.spec.startingDeadlineSeconds=17**


















